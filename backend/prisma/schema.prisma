generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  registration_id     String             @unique
  user_id             String             @id @default(uuid())
  user_email          String             @unique
  user_name           String
  user_password       String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  boards              Board[]
  lists               List[]
  tasks               Task[]
  share               Sharing[]
  reset               ResetPassword[]
  verify_registration VerifyRegistration @relation(fields: [registration_id], references: [registration_id], onDelete: Cascade, onUpdate: Cascade)

  @@index([user_id, user_email])
  @@map("users")
}

model Board {
  board_id    String    @id @default(uuid())
  board_title String
  is_sharing  Boolean   @default(false)
  board_slug  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [author_id], references: [user_id], onDelete: Cascade)
  author_id   String
  lists       List[]
  share       Sharing[]

  @@index([board_id])
  @@map("boards")
}

model List {
  list_id    String   @id @default(uuid())
  list_title String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [author_id], references: [user_id], onDelete: Cascade)
  author_id  String
  boards     Board    @relation(fields: [board_id], references: [board_id], onDelete: Cascade)
  board_id   String
  tasks      Task[]

  @@index([list_id])
  @@map("lists")
}

model Task {
  task_id    String   @id @default(uuid())
  task_title String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [author_id], references: [user_id], onDelete: Cascade)
  author_id  String
  lists      List     @relation(fields: [list_id], references: [list_id], onDelete: Cascade)
  list_id    String

  @@index([task_id])
  @@map("tasks")
}

model Sharing {
  share_id        String @id @default(uuid())
  author_id       String
  collaborator    User   @relation(fields: [collaborator_id], references: [user_id], onDelete: Cascade)
  collaborator_id String
  board           Board  @relation(fields: [board_id], references: [board_id], onDelete: Cascade)
  board_id        String

  @@map("shares")
}

model ResetPassword {
  id          String   @id @default(uuid())
  token_reset String
  expiresAt   BigInt
  createdAt   DateTime @default(now())
  isUse       Boolean  @default(false)
  user        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  user_id     String

  @@map("user_reset_passwords")
}

model VerifyRegistration {
  registration_id    String   @id @default(uuid())
  user_email         String   @unique
  user_name          String
  user_password      String
  is_verified        Boolean  @default(false)
  registration_token String   @unique
  expiredAt          String
  createdAt          DateTime @default(now())
  user               User?

  @@map("user_verify_registrations")
}
